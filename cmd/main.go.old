//cmd/tracewrap/main.go

/*
Package main implements the entry point for the tracewrap tool, which builds and runs
instrumented versions of Go applications. The application sets up a command-line
interface using Cobra, processes flags and arguments, prepares a workspace,
loads configuration, instruments the workspace, builds the instrumented binary,
moves it to the project's bin/ directory (renaming it as <appname>-tracewrap), and executes it.
*/
package main

import (
	"fmt"
	"os"
	"path/filepath"
	"runtime"

	"github.com/mwiater/tracewrap/config"
	"github.com/mwiater/tracewrap/pkg/instrument"
	"github.com/spf13/cobra"
)

func main() {
	// projectDir holds the path to the target Go project directory.
	// configPath holds the path to the YAML configuration file.
	// appName holds the application name used for renaming the binary.
	var projectDir, configPath, appName string

	rootCmd := &cobra.Command{
		Use:   "tracewrap",
		Short: "Tracewrap is a tool to build traced versions of Go applications.",
	}

	buildCmd := &cobra.Command{
		Use:   "buildTracedApplication",
		Short: "Build and run an instrumented version of the application",
		Run: func(cmd *cobra.Command, args []string) {
			if projectDir == "" {
				fmt.Println("Project directory must be specified using --project")
				os.Exit(1)
			}
			absProjectDir, err := filepath.Abs(projectDir)
			if err != nil {
				fmt.Printf("Error determining absolute path: %v\n", err)
				os.Exit(1)
			}
			if info, err := os.Stat(absProjectDir); err != nil || !info.IsDir() {
				fmt.Printf("Project directory does not exist or is not a directory: %s\n", absProjectDir)
				os.Exit(1)
			}
			fmt.Println("Tracing build initiated for project:", absProjectDir)

			workspace, err := instrument.PrepareWorkspace(absProjectDir)
			if err != nil {
				fmt.Printf("Error preparing workspace: %v\n", err)
				os.Exit(1)
			}
			fmt.Println("Workspace prepared at:", workspace)

			cfg, err := config.LoadConfig(configPath)
			if err != nil {
				fmt.Printf("Error loading configuration: %v\n", err)
				os.Exit(1)
			}

			err = instrument.SetDynamicTracerImport(workspace)
			if err != nil {
				fmt.Printf("Error setting tracer import: %v\n", err)
				os.Exit(1)
			}
			fmt.Println("Dynamic tracer import set to:", instrument.DynamicTracerImport)

			err = instrument.InstrumentWorkspace(workspace, *cfg)
			if err != nil {
				fmt.Printf("Error instrumenting workspace: %v\n", err)
				os.Exit(1)
			}
			fmt.Println("Instrumentation completed.")

			// Build the instrumented binary.
			binaryPath, err := instrument.BuildInstrumentedBinary(workspace)
			if err != nil {
				fmt.Printf("Error building binary: %v\n", err)
				os.Exit(1)
			}
			fmt.Println("Binary built at:", binaryPath)

			// If the --name flag is provided, move the binary to the project's bin/ directory
			// and rename it as <appname>-tracewrap.
			if appName != "" {
				binDir := filepath.Join(absProjectDir, "bin")
				if err := os.MkdirAll(binDir, 0755); err != nil {
					fmt.Printf("Error creating bin directory: %v\n", err)
					os.Exit(1)
				}
				newBinaryName := appName + "-tracewrap"
				if runtime.GOOS == "windows" {
					newBinaryName += ".exe"
				}
				newBinaryPath := filepath.Join(binDir, newBinaryName)
				if err := os.Rename(binaryPath, newBinaryPath); err != nil {
					fmt.Printf("Error moving binary to bin directory: %v\n", err)
					os.Exit(1)
				}
				fmt.Println("Binary moved to:", newBinaryPath)
				binaryPath = newBinaryPath
			}

			// Run the instrumented binary, forwarding any extra arguments.
			err = instrument.RunInstrumentedBinary(binaryPath, args)
			if err != nil {
				fmt.Printf("Error running binary: %v\n", err)
				os.Exit(1)
			}
			fmt.Println("Instrumented binary execution completed.")
		},
	}

	// Define flags.
	buildCmd.Flags().StringVarP(&projectDir, "project", "p", "", "Path to the target Go project")
	buildCmd.Flags().StringVarP(&configPath, "config", "c", "tracewrap.yaml", "Path to the configuration YAML file")
	buildCmd.Flags().StringVar(&appName, "name", "", "Name of the application (binary will be moved as <name>-tracewrap)")

	rootCmd.AddCommand(buildCmd)

	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
